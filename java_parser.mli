type token =
  | ABSTRACT of (unit * Localizing.extent)
  | ASSERT of (unit * Localizing.extent)
  | BREAK of (unit * Localizing.extent)
  | CASE of (unit * Localizing.extent)
  | CATCH of (unit * Localizing.extent)
  | CLASS of (unit * Localizing.extent)
  | CONTINUE of (unit * Localizing.extent)
  | DEFAULT of (unit * Localizing.extent)
  | DO of (unit * Localizing.extent)
  | ELSE of (unit * Localizing.extent)
  | ENUM of (unit * Localizing.extent)
  | EXTENDS of (unit * Localizing.extent)
  | FINAL of (unit * Localizing.extent)
  | FINALLY of (unit * Localizing.extent)
  | FOR of (unit * Localizing.extent)
  | IF of (unit * Localizing.extent)
  | IMPLEMENTS of (unit * Localizing.extent)
  | IMPORT of (unit * Localizing.extent)
  | INSTANCEOF of (unit * Localizing.extent)
  | INTERFACE of (unit * Localizing.extent)
  | NATIVE of (unit * Localizing.extent)
  | NEW of (unit * Localizing.extent)
  | PACKAGE of (unit * Localizing.extent)
  | PRIVATE of (unit * Localizing.extent)
  | PROTECTED of (unit * Localizing.extent)
  | PUBLIC of (unit * Localizing.extent)
  | RETURN of (unit * Localizing.extent)
  | SYNCHRONIZED of (unit * Localizing.extent)
  | STATIC of (unit * Localizing.extent)
  | STRICTFP of (unit * Localizing.extent)
  | SUPER of (unit * Localizing.extent)
  | SWITCH of (unit * Localizing.extent)
  | THIS of (unit * Localizing.extent)
  | TRANSIENT of (unit * Localizing.extent)
  | TRY of (unit * Localizing.extent)
  | THROW of (unit * Localizing.extent)
  | THROWS of (unit * Localizing.extent)
  | VOID of (unit * Localizing.extent)
  | VOLATILE of (unit * Localizing.extent)
  | WHILE of (unit * Localizing.extent)
  | LBRACE of (unit * Localizing.extent)
  | RBRACE of (unit * Localizing.extent)
  | LBRACK of (unit * Localizing.extent)
  | RBRACK of (unit * Localizing.extent)
  | LPAREN of (unit * Localizing.extent)
  | RPAREN of (unit * Localizing.extent)
  | COLON of (unit * Localizing.extent)
  | COMMA of (unit * Localizing.extent)
  | SEMICOLON of (unit * Localizing.extent)
  | COMP of (unit * Localizing.extent)
  | NOT of (unit * Localizing.extent)
  | AND of (unit * Localizing.extent)
  | ANDAND of (unit * Localizing.extent)
  | DIV of (unit * Localizing.extent)
  | DOT of (unit * Localizing.extent)
  | EQ of (unit * Localizing.extent)
  | MINUS of (unit * Localizing.extent)
  | MOD of (unit * Localizing.extent)
  | MULT of (unit * Localizing.extent)
  | OR of (unit * Localizing.extent)
  | OROR of (unit * Localizing.extent)
  | PLUS of (unit * Localizing.extent)
  | QUESTION of (unit * Localizing.extent)
  | XOR of (unit * Localizing.extent)
  | PLUSPLUS of (unit * Localizing.extent)
  | MINUSMINUS of (unit * Localizing.extent)
  | ELLIPSIS of (unit * Localizing.extent)
  | BOOLEAN of (Localizing.extent)
  | BYTE of (Localizing.extent)
  | SHORT of (Localizing.extent)
  | INT of (Localizing.extent)
  | LONG of (Localizing.extent)
  | CHAR of (Localizing.extent)
  | FLOAT of (Localizing.extent)
  | DOUBLE of (Localizing.extent)
  | LSHIFT of (Localizing.extent)
  | RSHIFT of (Localizing.extent)
  | URSHIFT of (Localizing.extent)
  | LT of (Localizing.extent)
  | GT of (Localizing.extent)
  | LTEQ of (Localizing.extent)
  | GTEQ of (Localizing.extent)
  | EQEQ of (Localizing.extent)
  | NOTEQ of (Localizing.extent)
  | MULTEQ of (Localizing.extent)
  | DIVEQ of (Localizing.extent)
  | MODEQ of (Localizing.extent)
  | PLUSEQ of (Localizing.extent)
  | MINUSEQ of (Localizing.extent)
  | LSHIFTEQ of (Localizing.extent)
  | RSHIFTEQ of (Localizing.extent)
  | URSHIFTEQ of (Localizing.extent)
  | ANDEQ of (Localizing.extent)
  | XOREQ of (Localizing.extent)
  | OREQ of (Localizing.extent)
  | NULL_LITERAL of (Localizing.extent)
  | INTEGER_LITERAL of (string*Localizing.extent)
  | IDENTIFIER of (string*Localizing.extent)
  | FLOATING_POINT_LITERAL of (string*Localizing.extent)
  | BOOLEAN_LITERAL of (bool*Localizing.extent)
  | CHARACTER_LITERAL of (string*Localizing.extent)
  | STRING_LITERAL of (string*Localizing.extent)
  | EOF

val program :
  (Lexing.lexbuf  -> token) -> Lexing.lexbuf -> Java_syntax.java_prog
